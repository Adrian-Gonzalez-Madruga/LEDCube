int b[] = {37, 39, 41, 43, 45, 47, 49, 51, 53};
int l[] = {31, 33, 35};

unsigned char seq[] = {
  B100, B000, B010, B000, B000, B000, B000, B000, B001, 2, //next cycle start // run along edges
  B000, B100, B000, B000, B000, B010, B000, B001, B000, 2,
  B000, B000, B100, B000, B000, B000, B001, B000, B010, 2,
  B000, B000, B000, B001, B000, B100, B000, B010, B000, 2,
  B001, B000, B000, B000, B000, B000, B010, B000, B100, 2,
  B000, B001, B000, B010, B000, B000, B000, B100, B000, 2,
  B010, B000, B001, B000, B000, B000, B100, B000, B000, 2,
  B000, B010, B000, B100, B000, B001, B000, B000, B000, 2,
  B100, B000, B010, B000, B000, B000, B000, B000, B001, 2, //next cycle start
  B000, B100, B000, B000, B000, B010, B000, B001, B000, 2,
  B000, B000, B100, B000, B000, B000, B001, B000, B010, 2,
  B000, B000, B000, B001, B000, B100, B000, B010, B000, 2,
  B001, B000, B000, B000, B000, B000, B010, B000, B100, 2,
  B000, B001, B000, B010, B000, B000, B000, B100, B000, 2,
  B010, B000, B001, B000, B000, B000, B100, B000, B000, 2,
  B000, B010, B000, B100, B000, B001, B000, B000, B000, 2,
  B100, B000, B010, B000, B000, B000, B000, B000, B001, 2, //next cycle start
  B000, B100, B000, B000, B000, B010, B000, B001, B000, 2,
  B000, B000, B100, B000, B000, B000, B001, B000, B010, 2,
  B000, B000, B000, B001, B000, B100, B000, B010, B000, 2,
  B001, B000, B000, B000, B000, B000, B010, B000, B100, 2,
  B000, B001, B000, B010, B000, B000, B000, B100, B000, 2,
  B010, B000, B001, B000, B000, B000, B100, B000, B000, 2,
  B000, B010, B000, B100, B000, B001, B000, B000, B000, 2,
  B100, B000, B010, B000, B000, B000, B000, B000, B001, 2, //next cycle start
  B000, B100, B000, B000, B000, B010, B000, B001, B000, 2,
  B000, B000, B100, B000, B000, B000, B001, B000, B010, 2,
  B000, B000, B000, B001, B000, B100, B000, B010, B000, 2,
  B001, B000, B000, B000, B000, B000, B010, B000, B100, 2,
  B000, B001, B000, B010, B000, B000, B000, B100, B000, 2,
  B010, B000, B001, B000, B000, B000, B100, B000, B000, 2,
  B000, B010, B000, B100, B000, B001, B000, B000, B000, 2,
  B100, B000, B010, B000, B000, B000, B000, B000, B001, 2, //next cycle start
  B000, B100, B000, B000, B000, B010, B000, B001, B000, 2,
  B000, B000, B100, B000, B000, B000, B001, B000, B010, 2,
  B000, B000, B000, B001, B000, B100, B000, B010, B000, 2,
  B001, B000, B000, B000, B000, B000, B010, B000, B100, 2,
  B000, B001, B000, B010, B000, B000, B000, B100, B000, 2,
  B010, B000, B001, B000, B000, B000, B100, B000, B000, 2,
  B000, B010, B000, B100, B000, B001, B000, B000, B000, 2,

  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5, //next cycle start //fill remove
  B000, B000, B001, B000, B000, B000, B100, B000, B000, 5,
  B000, B000, B001, B100, B000, B001, B100, B000, B000, 5,
  B100, B000, B001, B100, B000, B001, B100, B000, B001, 5,
  B100, B100, B001, B100, B000, B001, B100, B001, B001, 5,
  B100, B100, B101, B100, B000, B001, B101, B001, B001, 5,
  B100, B100, B111, B100, B000, B001, B111, B001, B001, 5,
  B100, B100, B111, B110, B000, B011, B111, B001, B001, 5,
  B110, B100, B111, B110, B000, B011, B111, B001, B011, 5,
  B110, B110, B111, B110, B000, B011, B111, B011, B011, 5,
  B110, B110, B111, B110, B010, B011, B111, B011, B011, 5,
  B110, B110, B111, B110, B111, B011, B111, B011, B011, 5,
  B110, B110, B111, B111, B111, B111, B111, B011, B011, 5,
  B111, B110, B111, B111, B111, B111, B111, B011, B111, 5,
  B111, B111, B111, B111, B111, B111, B111, B111, B111, 5,
  B111, B111, B111, B111, B010, B111, B111, B111, B111, 5,
  B111, B111, B111, B111, B000, B111, B111, B111, B111, 5,
  B111, B101, B111, B101, B000, B101, B111, B101, B111, 5,
  B101, B101, B101, B101, B000, B101, B101, B101, B101, 5,
  B000, B101, B000, B101, B000, B101, B000, B101, B000, 5,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5,

  B000, B000, B000, B000, B001, B000, B000, B000, B000, 2, //next cycle //fireworks
  B000, B000, B000, B000, B011, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B110, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B100, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B100, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 1,
  B100, B010, B100, B010, B000, B010, B100, B010, B100, 5,
  B010, B001, B010, B001, B100, B001, B010, B001, B010, 5,
  B000, B000, B001, B000, B010, B000, B001, B000, B001, 5,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5,
  B000, B000, B000, B000, B001, B000, B000, B000, B000, 2, //next cycle
  B000, B000, B000, B000, B011, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B110, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B100, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B100, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 1,
  B100, B010, B100, B010, B000, B010, B100, B010, B100, 5,
  B010, B001, B010, B001, B100, B001, B010, B001, B010, 5,
  B000, B000, B001, B000, B010, B000, B001, B000, B001, 5,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5,
  B000, B000, B000, B000, B001, B000, B000, B000, B000, 2, //next cycle
  B000, B000, B000, B000, B011, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B110, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B100, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B100, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 1,
  B100, B010, B100, B010, B000, B010, B100, B010, B100, 5,
  B010, B001, B010, B001, B100, B001, B010, B001, B010, 5,
  B000, B000, B001, B000, B010, B000, B001, B000, B001, 5,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5,
  B000, B000, B000, B000, B001, B000, B000, B000, B000, 2, //next cycle
  B000, B000, B000, B000, B011, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B110, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B100, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B100, B000, B000, B000, B000, 2,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 1,
  B100, B010, B100, B010, B000, B010, B100, B010, B100, 5,
  B010, B001, B010, B001, B100, B001, B010, B001, B010, 5,
  B000, B000, B001, B000, B010, B000, B001, B000, B001, 5,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5,

  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3, //next cycle // spin
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3,
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3, //next cycle
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3,
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3, //next cycle
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3,
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3, //next cycle
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3,
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3, //next cycle
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3,
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3, //next cycle
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3,
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3, //next cycle
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3,
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3, //next cycle
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,
  B001, B010, B100, B000, B111, B000, B100, B010, B001, 3,
  B000, B111, B000, B100, B010, B001, B010, B010, B010, 3,
  B100, B010, B001, B010, B010, B010, B001, B010, B100, 3,
  B010, B010, B010, B001, B010, B100, B000, B111, B000, 3,

  B000, B001, B000, B000, B000, B000, B000, B001, B000, 5, //next cycle // box lines
  B000, B001, B001, B000, B000, B000, B001, B001, B000, 5,
  B000, B001, B001, B001, B000, B001, B001, B001, B000, 5,
  B001, B001, B001, B001, B000, B001, B001, B001, B001, 5,
  B011, B001, B001, B001, B000, B001, B001, B001, B011, 5,
  B111, B001, B001, B001, B000, B001, B001, B001, B111, 5,
  B111, B101, B001, B001, B000, B001, B001, B101, B111, 5,
  B111, B101, B001, B101, B000, B101, B001, B101, B111, 5,
  B111, B101, B101, B101, B000, B101, B101, B101, B111, 5,
  B111, B101, B111, B101, B000, B101, B111, B101, B111, 5,
  B110, B101, B111, B101, B000, B101, B111, B101, B110, 5,
  B110, B101, B111, B100, B000, B100, B111, B101, B110, 5,
  B110, B101, B110, B100, B000, B100, B110, B101, B110, 5,
  B110, B100, B110, B100, B000, B100, B110, B100, B110, 5,
  B110, B000, B110, B100, B000, B100, B110, B000, B110, 5,
  B110, B000, B110, B000, B000, B000, B110, B000, B110, 5,
  B010, B000, B010, B000, B000, B000, B010, B000, B010, 5,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5,

  B000, B000, B001, B000, B000, B000, B100, B000, B000, 7, // next cycle //corner bounce
  B000, B000, B001, B010, B000, B010, B100, B000, B000, 7,
  B001, B000, B001, B010, B000, B010, B100, B000, B100, 7,
  B001, B010, B001, B010, B000, B010, B100, B010, B100, 7,
  B001, B010, B101, B010, B000, B010, B101, B010, B100, 7,
  B001, B010, B101, B010, B000, B010, B101, B010, B100, 7,
  B101, B010, B101, B010, B000, B010, B101, B010, B101, 7, // half
  B001, B010, B101, B010, B000, B010, B101, B010, B100, 7,
  B001, B010, B101, B010, B000, B010, B101, B010, B100, 7,
  B001, B010, B001, B010, B000, B010, B100, B010, B100, 7,
  B001, B000, B001, B010, B000, B010, B100, B000, B100, 7,
  B000, B000, B001, B010, B000, B010, B100, B000, B000, 7,
  B000, B000, B001, B000, B000, B000, B100, B000, B000, 7,

  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5, // next cycle // plane bounce
  B001, B001, B001, B001, B001, B001, B001, B001, B001, 5,
  B010, B010, B010, B010, B010, B010, B010, B010, B010, 5,
  B100, B100, B100, B100, B100, B100, B100, B100, B100, 5,
  B010, B010, B010, B010, B010, B010, B010, B010, B010, 5,
  B001, B001, B001, B001, B001, B001, B001, B001, B001, 5,
  B000, B000, B111, B000, B000, B111, B000, B000, B111, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B111, B000, B000, B111, B000, B000, B111, B000, B000, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B000, B000, B111, B000, B000, B111, B000, B000, B111, 5,
  B111, B111, B111, B000, B000, B000, B000, B000, B000, 5,
  B000, B000, B000, B111, B111, B111, B000, B000, B000, 5,
  B000, B000, B000, B000, B000, B000, B111, B111, B111, 5,
  B000, B000, B000, B111, B111, B111, B000, B000, B000, 5,
  B111, B111, B111, B000, B000, B000, B000, B000, B000, 5,
  B111, B000, B000, B111, B000, B000, B111, B000, B000, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B000, B000, B111, B000, B000, B111, B000, B000, B111, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B111, B000, B000, B111, B000, B000, B111, B000, B000, 5,
  B000, B000, B000, B000, B000, B000, B111, B111, B111, 5,
  B000, B000, B000, B111, B111, B111, B000, B000, B000, 5,
  B111, B111, B111, B000, B000, B000, B000, B000, B000, 5,
  B000, B000, B000, B111, B111, B111, B000, B000, B000, 5,
  B000, B000, B000, B000, B000, B000, B111, B111, B111, 5,
  B001, B001, B001, B001, B001, B001, B001, B001, B001, 5,
  B010, B010, B010, B010, B010, B010, B010, B010, B010, 5,
  B100, B100, B100, B100, B100, B100, B100, B100, B100, 5,
  B010, B010, B010, B010, B010, B010, B010, B010, B010, 5,
  B001, B001, B001, B001, B001, B001, B001, B001, B001, 5,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5,

  B000, B000, B001, B000, B000, B000, B000, B000, B000, 4, // next cycle // fly up fall
  B000, B000, B010, B000, B000, B000, B000, B000, B000, 4,
  B000, B000, B100, B000, B000, B000, B000, B000, B000, 4,
  B000, B000, B100, B000, B000, B000, B001, B000, B000, 4,
  B000, B000, B100, B000, B000, B000, B010, B000, B000, 4,
  B000, B000, B100, B000, B000, B000, B100, B000, B000, 4,
  B000, B000, B100, B000, B000, B000, B100, B000, B001, 4,
  B000, B000, B100, B000, B000, B000, B100, B000, B010, 4,
  B000, B000, B100, B000, B000, B000, B100, B000, B100, 4,
  B000, B000, B100, B000, B001, B000, B100, B000, B100, 4,
  B000, B000, B100, B000, B010, B000, B100, B000, B100, 4,
  B000, B000, B100, B000, B100, B000, B100, B000, B100, 4,
  B001, B000, B100, B000, B100, B000, B100, B000, B100, 4,
  B010, B000, B100, B000, B100, B000, B100, B000, B100, 4,
  B100, B000, B100, B000, B100, B000, B100, B000, B100, 4,
  B100, B001, B100, B000, B100, B000, B100, B000, B100, 4,
  B100, B010, B100, B000, B100, B001, B100, B000, B100, 4,
  B100, B100, B100, B000, B100, B010, B100, B001, B100, 4,
  B100, B100, B100, B001, B100, B100, B100, B010, B100, 4,
  B100, B100, B100, B010, B100, B100, B100, B100, B100, 4,
  B100, B100, B100, B100, B100, B100, B100, B100, B100, 12,
  B100, B100, B100, B100, B010, B100, B100, B100, B100, 4,
  B100, B010, B100, B010, B001, B010, B100, B010, B100, 4,
  B010, B001, B010, B001, B000, B001, B010, B001, B010, 4,
  B001, B000, B001, B000, B000, B000, B001, B000, B001, 4,
  B000, B000, B000, B000, B000, B000, B000, B000, B000, 4,

  B101, B000, B010, B010, B000, B101, B101, B000, B010, 5, //next cycle // fly through
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B010, B000, B101, B101, B000, B010, B010, B000, B101, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B101, B000, B010, B010, B000, B101, B101, B000, B010, 5,
  B101, B000, B010, B010, B000, B101, B101, B000, B010, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B010, B000, B101, B101, B000, B010, B010, B000, B101, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B101, B000, B010, B010, B000, B101, B101, B000, B010, 5,
  B101, B000, B010, B010, B000, B101, B101, B000, B010, 5, //next cycle
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B010, B000, B101, B101, B000, B010, B010, B000, B101, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B101, B000, B010, B010, B000, B101, B101, B000, B010, 5,
  B101, B000, B010, B010, B000, B101, B101, B000, B010, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B010, B000, B101, B101, B000, B010, B010, B000, B101, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B101, B000, B010, B010, B000, B101, B101, B000, B010, 5,
  B101, B000, B010, B010, B000, B101, B101, B000, B010, 5, //next cycle
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B010, B000, B101, B101, B000, B010, B010, B000, B101, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B101, B000, B010, B010, B000, B101, B101, B000, B010, 5,
  B101, B000, B010, B010, B000, B101, B101, B000, B010, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B010, B000, B101, B101, B000, B010, B010, B000, B101, 5,
  B000, B111, B000, B000, B111, B000, B000, B111, B000, 5,
  B101, B000, B010, B010, B000, B101, B101, B000, B010, 5,

  B000, B000, B000, B000, B000, B000, B000, B000, B000, 5000, //next cycle //all blink
  B111, B111, B111, B111, B111, B111, B111, B111, B111, 5000,
};

int steps = -1;
int counter = 0;


void setup() {
  for (int i = 0; i < 9; i++) {
    pinMode(b[i], OUTPUT);
    digitalWrite(b[i], LOW);
  }
  for (int i = 0; i < 3; i++) {
    pinMode(l[i], OUTPUT);
    digitalWrite(l[i], LOW);
  }
}

void loop() {

  counter--; //counter and make steps 0 when reaches a maximun value
  if (counter <= 0) {
    steps++;
    counter = seq[((steps * 10) + 9) % sizeof(seq)] * 10;
  }
  if (steps >= 3500) {
    steps = 0;
  }


  for (int layer = 0; layer < 3; layer++) { // double for loop to control the lights and layers
    for (int column = 0; column < 9; column++) {
      digitalWrite(b[column], seq[(steps * 10 + column) % sizeof(seq)] & (1 << layer));   // TODO: once there are more steps in sequence should be (step * 10 + column)
    }

    digitalWrite(l[layer], HIGH);
    delay(1);
    digitalWrite(l[layer], LOW);
  }
}
